---
provisioner:
  name: chef_solo
  encrypted_data_bag_secret_key_path: test/integration/encrypted_data_bag_secret
  data_bags_path: test/integration/data_bags

suites:
  - name: default
    run_list:
      - recipe[osl-jenkins::default]
  - name: master
    run_list:
      - recipe[osl-jenkins::master]
    attributes:
      certificate:
        - snakeoil:
            cert_path: "/etc/pki/tls"
            cert_file: wildcard.pem
            key_file: wildcard.key
            chain_file: wildcard-bundle.crt
            combined_file: true

  - name: haproxy
    encrypted_data_bag_secret_key_path: test/integration/encrypted_data_bag_secret
    run_list:
      - recipe[certificate::manage_by_attributes]
      - recipe[osl-jenkins::haproxy]
      - recipe[osl-haproxy::default]
    attributes:
      certificate:
        - snakeoil:
            cert_path: "/etc/pki/tls"
            cert_file: wildcard.pem
            key_file: wildcard.key
            chain_file: wildcard-bundle.crt
            combined_file: true
  - name: chef_backup
    run_list:
      - recipe[osl-jenkins::chef_backup]
    attributes:
      jenkins:
        master:
          user: centos
          group: centos
  - name: chef_ci_cookbook_template
    run_list:
      - recipe[osl-jenkins::chef_ci_cookbook_template]
  - name: plugins
    run_list:
      - recipe[osl-jenkins::master]
      - recipe[jenkins::java]
      - recipe[jenkins::master]
      - recipe[osl-jenkins::plugins]
  - name: ftp
    run_list:
      - recipe[osl-jenkins::ftp]
  # In order properly test Github integration, you must export the GITHUB_USER
  # and GITHUB_TOKEN env vars in your shell before you converge this suite.
  # You'll need to use an account/token that has permission to pull/push
  # private repos and create webhooks.
  # Also, choose a random TRIGGER_TOKEN.
  # Oh, and after you converge once, you need to enable user/pass security in
  # order to get remotely triggered builds to work, but this prevents the
  # jenkins cookbook from updating jobs, so you need to create a user and
  # export the JENKINS_USER and JENKINS_PASS env vars too.
  - name: cookbook-uploader
    run_list:
      - recipe[osl-jenkins::master]
      - recipe[jenkins::java]
      - recipe[jenkins::master]
      - recipe[osl-jenkins::cookbook_uploader]
    provisioner: chef_zero
    driver:
      security_groups:
        - no-firewall
    attributes:
      osl-jenkins:
        cookbook_uploader:
          credentials:
            github_user: <%= ENV['GITHUB_USER'] %>
            github_token: <%= ENV['GITHUB_TOKEN'] %>
            trigger_token: <%= ENV['TRIGGER_TOKEN'] %>
            jenkins_user: <%= ENV['JENKINS_USER'] %>
            jenkins_pass: <%= ENV['JENKINS_PASS'] %>
      jenkins:
        master:
          listen_address: '0.0.0.0'
