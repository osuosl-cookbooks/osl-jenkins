---
provisioner:
  name: chef_solo
  encrypted_data_bag_secret_key_path: test/integration/encrypted_data_bag_secret
  data_bags_path: test/integration/data_bags

suites:
  - name: default
    run_list:
      - recipe[osl-jenkins::default]
  - name: master
    run_list:
      - recipe[osl-jenkins::master]
    attributes:
      certificate:
        - snakeoil:
            cert_path: "/etc/pki/tls"
            cert_file: wildcard.pem
            key_file: wildcard.key
            chain_file: wildcard-bundle.crt
            combined_file: true

  - name: haproxy
    encrypted_data_bag_secret_key_path: test/integration/encrypted_data_bag_secret
    run_list:
      - recipe[certificate::manage_by_attributes]
      - recipe[osl-jenkins::haproxy]
      - recipe[osl-haproxy::default]
    attributes:
      certificate:
        - snakeoil:
            cert_path: "/etc/pki/tls"
            cert_file: wildcard.pem
            key_file: wildcard.key
            chain_file: wildcard-bundle.crt
            combined_file: true
  - name: chef_backup
    run_list:
      - recipe[osl-jenkins::chef_backup]
    attributes:
      jenkins:
        master:
          user: centos
          group: centos
  - name: chef_ci_cookbook_template
    run_list:
      - recipe[osl-jenkins::chef_ci_cookbook_template]
  - name: plugins
    run_list:
      - recipe[osl-jenkins::master]
      - recipe[jenkins::java]
      - recipe[jenkins::master]
      - recipe[osl-jenkins::plugins]
  - name: ftp
    run_list:
      - recipe[osl-jenkins::ftp]

  # In order to properly test GitHub integration, you must export the
  # GITHUB_USER and GITHUB_TOKEN env vars in your shell before you converge
  # this suite.  You'll need to use an account/token that has permission to
  # pull/push private repos and create webhooks.  You also need to choose a
  # random TRIGGER_TOKEN string.  This is what GitHub will use to trigger
  # Jenkins jobs remotely.
  #
  # For example:
  #   $ export GITHUB_USER=examplegithubuser
  #   $ export GITHUB_TOKEN=examplegithubtoken
  #   $ export TRIGGER_TOKEN=exampletriggertoken
  #   $ kitchen converge cookbook-uploader-centos-72
  #
  # It's worth noting that security (i.e. logging in to Jenkins) is not enabled
  # by default, and so remotely triggered build configuration will not appear
  # when configuring jobs.  It will, however, still be set.  If you enable
  # user/pass security, then the Jenkins cookbook will not be able to update
  # jobs, since it then has to log in.  To fix this, you must create a user
  # account for the cookbook and export the JENKINS_USER and JENKINS_PASS env
  # vars in addition to the others.
  - name: cookbook-uploader
    encrypted_data_bag_secret_key_path: test/integration/encrypted_data_bag_secret
    run_list:
      - recipe[osl-jenkins::master]
      - recipe[jenkins::java]
      - recipe[jenkins::master]
      - recipe[certificate::manage_by_attributes]
      - recipe[osl-jenkins::haproxy]
      - recipe[osl-haproxy::default]
      - recipe[osl-jenkins::cookbook_uploader]
    provisioner: chef_zero
    driver:
      security_groups:
        - no-firewall
    attributes:
      osl-jenkins:
        cookbook_uploader:
          override_repos:
            - lanparty
          github_insecure_hook: true
          credentials:
            github_user: <%= ENV['GITHUB_USER'] %>
            github_token: <%= ENV['GITHUB_TOKEN'] %>
            trigger_token: <%= ENV['TRIGGER_TOKEN'] %>
            jenkins_user: <%= ENV['JENKINS_USER'] %>
            jenkins_pass: <%= ENV['JENKINS_PASS'] %>
          authorized_teams:
            - "osuosl-cookbooks/staff"
      jenkins:
        master:
          listen_address: '0.0.0.0'
      certificate:
        - snakeoil:
            cert_path: "/etc/pki/tls"
            cert_file: wildcard.pem
            key_file: wildcard.key
            chain_file: wildcard-bundle.crt
            combined_file: true
